class Vulnerability:
  def __init__(self, product, version, protocol, port, port_state='open', cpe=None):
    self.port = port
    self.protocol = protocol
    self.version = version
    self.product = self._get_product_for_port(port)
    self.port_state = port_state
    self.cpe = cpe if cpe else f"cpe:2.3:a:{self.product}:{self.product}:{self.version}"

  def _get_product_for_port(self, port):
    port_product_map = {
      "21": "vsftpd",
      "23": "telnetd",
      "80": "Apache httpd",
      "110": "Dovecot pop3d",
      "139": "Samba smbd",
      "445": "Microsoft Windows RPC",
      "3306": "MySQL",
      "6379": "Redis",
      "8080": "Apache Tomcat",
      "9200": "Elasticsearch",
      "50070": "Hadoop HDFS"    
    }
    return port_product_map.get(str(port), "Unknown")
  
  @staticmethod
  def make_vulnerabilities():
    return [
      Vulnerability("vsftpd", "3.0.3", "tcp", "21"),
      Vulnerability("telnetd", "0.17", "tcp", "23"),
      Vulnerability("Apache httpd", "2.4.37", "tcp", "80"),
      Vulnerability("Dovecot pop3d", "2.3.7", "tcp", "110"),
      Vulnerability("Samba smbd", "4.9.1", "tcp", "139"),
      Vulnerability("Microsoft Windows RPC", "5.1", "tcp", "445"),
      Vulnerability("MySQL", "8.0.17", "tcp", "3306"),
      Vulnerability("Redis", "5.0.5", "tcp", "6379"),
      Vulnerability("Apache Tomcat", "9.0.24", "tcp", "8080"),
      Vulnerability("Elasticsearch", "7.3.0", "tcp", "9200"),
      Vulnerability("Hadoop HDFS", "3.2.0", "tcp", "50070")    
    ]
